@page "/"
@using ToDo
@using Microsoft.EntityFrameworkCore
@inject TodoContext db
@inject IJSRuntime JS

<h2>Todo List</h2>

<form>

    @if (db.TodoItems.Count() == 0)
    {
        <div class="alert alert-info">You have no taks. Create one!</div>
    }

    else
    {
        <ul class="list-group">
            @foreach (var item in db.TodoItems)
            {
                <li class="list-group-item">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="todo_@item.Id" @bind="item.IsSelected">
                        <label class="form-check-label" for="todo_@item.Id">@item.TaskName</label>
                    </div>
                </li>
            }
        </ul>
    }
 
    <div class="my-3">
        <button type="button" class="btn btn-danger" @onclick="DeleteSelectedTask">Delete Selected</button>
    </div> 

</form>

<form @onsubmit="AddTask" class="my-3">
    <div class="form-group">
        <label  for="taskName">Task Name:</label>
        <input type="text" class="form-control" id="taskName" name="taskName" required>
    </div>
    <button type="submit" class="btn btn-secondary mt-2">Add Task</button>
</form>

@code {

    private async Task AddTask()
    {
        var taskName = await JS.InvokeAsync<string>("getValue", "taskName");
        if (!string.IsNullOrWhiteSpace(taskName))
        {
            var todoItem = new TodoItem { TaskName = taskName };
            db.TodoItems.Add(todoItem);
            await db.SaveChangesAsync();

            await JS.InvokeVoidAsync("setValue", "taskName", "");
            await JS.InvokeVoidAsync("focusElement", "taskName");
        }
    }

    private async Task DeleteSelectedTask()
    {
        var todoItems = await db.TodoItems.ToListAsync();
        var selectedItems = todoItems.Where(t => t.IsSelected).ToList();
        if (selectedItems.Any())
        {
            db.TodoItems.RemoveRange(selectedItems);
            await db.SaveChangesAsync();
        }
    }
}